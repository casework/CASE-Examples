@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix observable: <https://ontology.unifiedcyberontology.org/uco/observable/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix types: <https://ontology.unifiedcyberontology.org/uco/types/> .
@prefix vocabulary: <https://ontology.unifiedcyberontology.org/uco/vocabulary/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

[]
	a sh:ValidationReport ;
	sh:conforms "false"^^xsd:boolean ;
	sh:result
		[
			a sh:ValidationResult ;
			sh:focusNode "application/x-tar" ;
			sh:resultMessage "The used mimeType value is not a concept with a skos:notation.  Some consumers of this data expect a string with the MIME 'type/subtype' format to be supplied with skos:notation.  Please either add the skos:notation to your input graph or incorporate the UCO MIME Taxonomy."@en ;
			sh:resultPath skos:notation ;
			sh:resultSeverity sh:Warning ;
			sh:sourceConstraintComponent sh:MinCountConstraintComponent ;
			sh:sourceShape observable:mimeType-notation ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode "image/jpg" ;
			sh:resultMessage "The used mimeType value is not a concept with a skos:notation.  Some consumers of this data expect a string with the MIME 'type/subtype' format to be supplied with skos:notation.  Please either add the skos:notation to your input graph or incorporate the UCO MIME Taxonomy."@en ;
			sh:resultPath skos:notation ;
			sh:resultSeverity sh:Warning ;
			sh:sourceConstraintComponent sh:MinCountConstraintComponent ;
			sh:sourceShape observable:mimeType-notation ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>" ;
				observable:hash
					[
						a types:Hash ;
						types:hashMethod "MD5"^^vocabulary:HashNameVocab ;
						types:hashValue "3d137a188c1e82247b815209ce44af2c"^^xsd:hexBinary ;
					] ,
					[
						a types:Hash ;
						types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
						types:hashValue "8c8b39473c4064f6b4db11a67251ffdf65c42ebadc5c3e02a009f95f6cf7c9e8"^^xsd:hexBinary ;
					]
					;
				observable:magicNumber "/9j/ww==" ;
				observable:mimeType "image/jpg" ;
				observable:sizeInBytes "3500"^^xsd:integer ;
			] ;
			sh:resultMessage "Value does not have class dcterms:FileFormat" ;
			sh:resultPath observable:mimeType ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:ClassConstraintComponent ;
			sh:sourceShape [
				sh:class dcterms:FileFormat ;
				sh:nodeKind sh:IRI ;
				sh:path observable:mimeType ;
			] ;
			sh:value "image/jpg" ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>" ;
				observable:hash
					[
						a types:Hash ;
						types:hashMethod "MD5"^^vocabulary:HashNameVocab ;
						types:hashValue "3d137a188c1e82247b815209ce44af2c"^^xsd:hexBinary ;
					] ,
					[
						a types:Hash ;
						types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
						types:hashValue "8c8b39473c4064f6b4db11a67251ffdf65c42ebadc5c3e02a009f95f6cf7c9e8"^^xsd:hexBinary ;
					]
					;
				observable:magicNumber "/9j/ww==" ;
				observable:mimeType "image/jpg" ;
				observable:sizeInBytes "3500"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not an instance of types:MIMEFormat or one of its subclasses.  Please consider using a value having type types:IANAMediaType or types:NonIANAMediaType."@en ;
			sh:resultPath observable:mimeType ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraintComponent sh:ClassConstraintComponent ;
			sh:sourceShape observable:mimeType-class-types-MIMEFormat ;
			sh:value "image/jpg" ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>" ;
				observable:hash
					[
						a types:Hash ;
						types:hashMethod "MD5"^^vocabulary:HashNameVocab ;
						types:hashValue "3d137a188c1e82247b815209ce44af2c"^^xsd:hexBinary ;
					] ,
					[
						a types:Hash ;
						types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
						types:hashValue "8c8b39473c4064f6b4db11a67251ffdf65c42ebadc5c3e02a009f95f6cf7c9e8"^^xsd:hexBinary ;
					]
					;
				observable:magicNumber "/9j/ww==" ;
				observable:mimeType "image/jpg" ;
				observable:sizeInBytes "3500"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:mimeType ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class dcterms:FileFormat ;
				sh:nodeKind sh:IRI ;
				sh:path observable:mimeType ;
			] ;
			sh:value "image/jpg" ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:dataPayload "<base 64 encoded data of the file>" ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4"^^xsd:hexBinary ;
				] ;
				observable:magicNumber "NzUgNzMgNzQgNjEgNzI=" ;
				observable:mimeType "application/x-tar" ;
				observable:sizeInBytes "23000"^^xsd:integer ;
			] ;
			sh:resultMessage "Value does not have class dcterms:FileFormat" ;
			sh:resultPath observable:mimeType ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:ClassConstraintComponent ;
			sh:sourceShape [
				sh:class dcterms:FileFormat ;
				sh:nodeKind sh:IRI ;
				sh:path observable:mimeType ;
			] ;
			sh:value "application/x-tar" ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:dataPayload "<base 64 encoded data of the file>" ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4"^^xsd:hexBinary ;
				] ;
				observable:magicNumber "NzUgNzMgNzQgNjEgNzI=" ;
				observable:mimeType "application/x-tar" ;
				observable:sizeInBytes "23000"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not an instance of types:MIMEFormat or one of its subclasses.  Please consider using a value having type types:IANAMediaType or types:NonIANAMediaType."@en ;
			sh:resultPath observable:mimeType ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraintComponent sh:ClassConstraintComponent ;
			sh:sourceShape observable:mimeType-class-types-MIMEFormat ;
			sh:value "application/x-tar" ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:dataPayload "<base 64 encoded data of the file>" ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4"^^xsd:hexBinary ;
				] ;
				observable:magicNumber "NzUgNzMgNzQgNjEgNzI=" ;
				observable:mimeType "application/x-tar" ;
				observable:sizeInBytes "23000"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:mimeType ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class dcterms:FileFormat ;
				sh:nodeKind sh:IRI ;
				sh:path observable:mimeType ;
			] ;
			sh:value "application/x-tar" ;
		]
		;
	.

