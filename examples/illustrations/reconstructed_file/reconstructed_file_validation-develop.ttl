@prefix core: <https://ontology.unifiedcyberontology.org/uco/core/> .
@prefix observable: <https://ontology.unifiedcyberontology.org/uco/observable/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix types: <https://ontology.unifiedcyberontology.org/uco/types/> .
@prefix vocabulary1: <https://ontology.unifiedcyberontology.org/uco/vocabulary/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

[]
	a sh:ValidationReport ;
	sh:conforms "false"^^xsd:boolean ;
	sh:result
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship3> ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath core:kindOfRelationship ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path core:kindOfRelationship ;
			] ;
			sh:value "Contained_Within"^^vocabulary1:ObservableObjectRelationshipVocab ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship4> ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath core:kindOfRelationship ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path core:kindOfRelationship ;
			] ;
			sh:value "Contained_Within"^^vocabulary1:ObservableObjectRelationshipVocab ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship5> ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath core:kindOfRelationship ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path core:kindOfRelationship ;
			] ;
			sh:value "Contained_Within"^^vocabulary1:ObservableObjectRelationshipVocab ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary1:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary1:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "<base 64 encoded data of the file>"^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary1:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary1:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "<base 64 encoded data of the file>"^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary1:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary1:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "<base 64 encoded data of the file>"^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary1:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary1:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
		]
		;
	.

