@prefix core: <https://ontology.unifiedcyberontology.org/uco/core/> .
@prefix ns1: <http://example.org/local#> .
@prefix observable: <https://ontology.unifiedcyberontology.org/uco/observable/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix types: <https://ontology.unifiedcyberontology.org/uco/types/> .
@prefix vocabulary: <https://ontology.unifiedcyberontology.org/uco/vocabulary/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

[]
	a sh:ValidationReport ;
	sh:conforms "false"^^xsd:boolean ;
	sh:result
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/android_image-e35985c1-06d6-4ace-8e05-491d7ebefbdb> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:FileFacet ;
				ns1:accessedAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				ns1:createdAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:extension "img" ;
				observable:fileName "DFL-20140712-001C.img" ;
				observable:filePath "C:/input_devices/DFL-20140712-001C.img" ;
				observable:fileSystemType "NTFS" ;
				observable:isDirectory "false"^^xsd:boolean ;
				observable:metadataChangeTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:modifiedTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/android_image-e35985c1-06d6-4ace-8e05-491d7ebefbdb> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "45654000"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/data_piece-06a91826-f209-4b11-abad-461d09ab3898> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/data_piece-07e7e719-3904-4787-96ab-eb21a4b84074> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/data_piece-d3d3dbdd-c294-414b-a3fb-70b95a16a5f0> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/reconstructed_file-de78a25a-542f-436a-b8d2-ffc90bd30cdf> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship-2e7ec96b-4e6b-4b6b-8d0a-3aecf7d95c79> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "57984"^^xsd:integer ;
				observable:rangeSize "248"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship-30c49e48-8136-4a93-aba9-b2106ec2132f> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship-8e6f02f2-7ec3-4999-a74c-eb9a9e309231> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship-cbdd3ac7-4966-421d-b3f9-680a2e1df89b> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "2"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship-dc970065-8c72-42dc-8efb-3f5171115f9a> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "1"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode <http://example.org/kb/relationship-f7ead825-6b60-4c4f-a8c1-b9c934be6c24> ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath core:hasFacet ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class core:Facet ;
				sh:nodeKind sh:IRI ;
				sh:path core:hasFacet ;
			] ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "0"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FileFacet ;
				ns1:accessedAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				ns1:createdAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:extension "img" ;
				observable:fileName "DFL-20140712-001C.img" ;
				observable:filePath "C:/input_devices/DFL-20140712-001C.img" ;
				observable:fileSystemType "NTFS" ;
				observable:isDirectory "false"^^xsd:boolean ;
				observable:metadataChangeTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:modifiedTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:FileFacet ;
				ns1:accessedAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				ns1:createdAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:extension "img" ;
				observable:fileName "DFL-20140712-001C.img" ;
				observable:filePath "C:/input_devices/DFL-20140712-001C.img" ;
				observable:fileSystemType "NTFS" ;
				observable:isDirectory "false"^^xsd:boolean ;
				observable:metadataChangeTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:modifiedTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FileFacet ;
				ns1:accessedAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				ns1:createdAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:extension "img" ;
				observable:fileName "DFL-20140712-001C.img" ;
				observable:filePath "C:/input_devices/DFL-20140712-001C.img" ;
				observable:fileSystemType "NTFS" ;
				observable:isDirectory "false"^^xsd:boolean ;
				observable:metadataChangeTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:modifiedTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:FileFacet ;
				ns1:accessedAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				ns1:createdAction "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:extension "img" ;
				observable:fileName "DFL-20140712-001C.img" ;
				observable:filePath "C:/input_devices/DFL-20140712-001C.img" ;
				observable:fileSystemType "NTFS" ;
				observable:isDirectory "false"^^xsd:boolean ;
				observable:metadataChangeTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
				observable:modifiedTime "2010-01-15T17:59:43.250000+00:00"^^xsd:dateTime ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "<base 64 encoded data of the file>"^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "512"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:hash ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class types:Hash ;
				sh:nodeKind sh:IRI ;
				sh:path observable:hash ;
			] ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "<base 64 encoded data of the file>"^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "248"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:hash ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class types:Hash ;
				sh:nodeKind sh:IRI ;
				sh:path observable:hash ;
			] ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "<base 64 encoded data of the file>"^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "<base 64 encoded data of the file>"^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "774"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:hash ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class types:Hash ;
				sh:nodeKind sh:IRI ;
				sh:path observable:hash ;
			] ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not Literal with datatype xsd:string" ;
			sh:resultPath observable:dataPayload ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:DatatypeConstraintComponent ;
			sh:sourceShape [
				sh:datatype xsd:string ;
				sh:maxCount "1"^^xsd:integer ;
				sh:nodeKind sh:Literal ;
				sh:path observable:dataPayload ;
			] ;
			sh:value "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:byteOrder "Big-endian"^^vocabulary:EndiannessTypeVocab ;
				observable:dataPayload "w7/DmMO/w6AAEEpGSUY="^^xsd:base64Binary ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "14"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:hash ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class types:Hash ;
				sh:nodeKind sh:IRI ;
				sh:path observable:hash ;
			] ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "45654000"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "45654000"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "45654000"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:ContentDataFacet ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "45654000"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:ContentDataFacet ;
				observable:hash [
					a types:Hash ;
					types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
					types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
				] ;
				observable:sizeInBytes "45654000"^^xsd:integer ;
			] ;
			sh:resultMessage "Value is not of Node Kind sh:IRI" ;
			sh:resultPath observable:hash ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraintComponent sh:NodeKindConstraintComponent ;
			sh:sourceShape [
				sh:class types:Hash ;
				sh:nodeKind sh:IRI ;
				sh:path observable:hash ;
			] ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "45156"^^xsd:integer ;
				observable:rangeSize "512"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:DataRangeFacet ;
				observable:rangeOffset "57984"^^xsd:integer ;
				observable:rangeSize "248"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "57984"^^xsd:integer ;
				observable:rangeSize "248"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:DataRangeFacet ;
				observable:rangeOffset "57984"^^xsd:integer ;
				observable:rangeSize "248"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:DataRangeFacet ;
				observable:rangeOffset "57984"^^xsd:integer ;
				observable:rangeSize "248"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FragmentFacet ;
				observable:fragmentIndex "0"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "0"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FragmentFacet ;
				observable:fragmentIndex "0"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "0"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FragmentFacet ;
				observable:fragmentIndex "1"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "1"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FragmentFacet ;
				observable:fragmentIndex "1"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "1"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FragmentFacet ;
				observable:fragmentIndex "2"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "2"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a observable:FragmentFacet ;
				observable:fragmentIndex "2"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a observable:FragmentFacet ;
				observable:fragmentIndex "2"^^xsd:integer ;
				observable:totalFragments "3"^^xsd:integer ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "a2bfbb3fbcfbf372c3a83ac9b9aad3d0aa4fb8bcc807af7aabcccac94a8d4892"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "befb6b14790081e9d79e9b533e227791033e952d04b5f07d577ad65d4806a7a9"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "e5ca3be56f66200a1bb2262e948ac08dbc672bc8033c1ada743787b0c667dea6"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are required to not be blank nodes." ;
			sh:resultSeverity sh:Violation ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				sh:message "UcoThings are required to not be blank nodes."@en ;
				sh:select """
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER isBlank ($this)
			}
		""" ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
			] ;
		] ,
		[
			a sh:ValidationResult ;
			sh:focusNode [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
			] ;
			sh:resultMessage "UcoThings are suggested to end with a UUID." ;
			sh:resultSeverity sh:Info ;
			sh:sourceConstraint [
				a sh:SPARQLConstraint ;
				rdfs:seeAlso <https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3> ;
				sh:message "UcoThings are suggested to end with a UUID."@en ;
				sh:select '''
			PREFIX uco-core: <https://ontology.unifiedcyberontology.org/uco/core/>
			SELECT $this
			WHERE {
			        $this a/rdfs:subClassOf* uco-core:UcoThing .
			        FILTER (
			                ! REGEX (
			                        STR($this),
			                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$",
			                        "i"
			                )
			        )
			}
		''' ;
			] ;
			sh:sourceConstraintComponent sh:SPARQLConstraintComponent ;
			sh:sourceShape core:UcoThing-identifier-regex-shape ;
			sh:value [
				a types:Hash ;
				types:hashMethod "SHA256"^^vocabulary:HashNameVocab ;
				types:hashValue "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f"^^xsd:hexBinary ;
			] ;
		]
		;
	.

